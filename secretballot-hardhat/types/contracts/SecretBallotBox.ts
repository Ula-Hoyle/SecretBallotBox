/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SecretBallotBox {
  export type EncryptedVoteStruct = {
    voteId: BigNumberish;
    ballotId: BigNumberish;
    encryptedChoice: BytesLike;
    voter: AddressLike;
  };

  export type EncryptedVoteStructOutput = [
    voteId: bigint,
    ballotId: bigint,
    encryptedChoice: string,
    voter: string
  ] & {
    voteId: bigint;
    ballotId: bigint;
    encryptedChoice: string;
    voter: string;
  };

  export type TallyResultStruct = {
    ballotId: BigNumberish;
    resultPerOption: BigNumberish[];
    proofHash: string;
    timestamp: BigNumberish;
  };

  export type TallyResultStructOutput = [
    ballotId: bigint,
    resultPerOption: bigint[],
    proofHash: string,
    timestamp: bigint
  ] & {
    ballotId: bigint;
    resultPerOption: bigint[];
    proofHash: string;
    timestamp: bigint;
  };
}

export interface SecretBallotBoxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "castVote"
      | "castVoteOneHot"
      | "createBallot"
      | "getBallot"
      | "getBallotCount"
      | "getBallotStatus"
      | "getEncryptedTally"
      | "getEncryptedVotes"
      | "getTallyResult"
      | "getVoteCount"
      | "grantTallyDecryption"
      | "protocolId"
      | "submitTallyResult"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BallotCreated" | "TallyPublished" | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteOneHot",
    values: [BigNumberish, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createBallot",
    values: [string, string, string[], BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBallot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBallotCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBallotStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTally",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTallyResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantTallyDecryption",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitTallyResult",
    values: [BigNumberish, BigNumberish[], string]
  ): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteOneHot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBallot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBallotCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBallotStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTallyResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantTallyDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitTallyResult",
    data: BytesLike
  ): Result;
}

export namespace BallotCreatedEvent {
  export type InputTuple = [
    ballotId: BigNumberish,
    initiator: AddressLike,
    title: string,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    ballotId: bigint,
    initiator: string,
    title: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    ballotId: bigint;
    initiator: string;
    title: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TallyPublishedEvent {
  export type InputTuple = [
    ballotId: BigNumberish,
    resultPerOption: BigNumberish[],
    proofHash: string
  ];
  export type OutputTuple = [
    ballotId: bigint,
    resultPerOption: bigint[],
    proofHash: string
  ];
  export interface OutputObject {
    ballotId: bigint;
    resultPerOption: bigint[];
    proofHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [ballotId: BigNumberish, voter: AddressLike];
  export type OutputTuple = [ballotId: bigint, voter: string];
  export interface OutputObject {
    ballotId: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecretBallotBox extends BaseContract {
  connect(runner?: ContractRunner | null): SecretBallotBox;
  waitForDeployment(): Promise<this>;

  interface: SecretBallotBoxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  castVote: TypedContractMethod<
    [
      ballotId: BigNumberish,
      inputEncryptedChoice: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  castVoteOneHot: TypedContractMethod<
    [
      ballotId: BigNumberish,
      encryptedOneHot: BytesLike[],
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  createBallot: TypedContractMethod<
    [
      title: string,
      description: string,
      options: string[],
      startTime: BigNumberish,
      endTime: BigNumberish,
      maxVotesPerAddress: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getBallot: TypedContractMethod<
    [ballotId: BigNumberish],
    [
      [string, string, string[], bigint, bigint, boolean, string] & {
        title: string;
        description: string;
        options: string[];
        startTime: bigint;
        endTime: bigint;
        resultPublished: boolean;
        initiator: string;
      }
    ],
    "view"
  >;

  getBallotCount: TypedContractMethod<[], [bigint], "view">;

  getBallotStatus: TypedContractMethod<
    [ballotId: BigNumberish],
    [bigint],
    "view"
  >;

  getEncryptedTally: TypedContractMethod<
    [ballotId: BigNumberish],
    [string[]],
    "view"
  >;

  getEncryptedVotes: TypedContractMethod<
    [ballotId: BigNumberish],
    [SecretBallotBox.EncryptedVoteStructOutput[]],
    "view"
  >;

  getTallyResult: TypedContractMethod<
    [ballotId: BigNumberish],
    [SecretBallotBox.TallyResultStructOutput],
    "view"
  >;

  getVoteCount: TypedContractMethod<[ballotId: BigNumberish], [bigint], "view">;

  grantTallyDecryption: TypedContractMethod<
    [ballotId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  submitTallyResult: TypedContractMethod<
    [
      ballotId: BigNumberish,
      resultPerOption: BigNumberish[],
      proofHash: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [
      ballotId: BigNumberish,
      inputEncryptedChoice: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteOneHot"
  ): TypedContractMethod<
    [
      ballotId: BigNumberish,
      encryptedOneHot: BytesLike[],
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBallot"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      options: string[],
      startTime: BigNumberish,
      endTime: BigNumberish,
      maxVotesPerAddress: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBallot"
  ): TypedContractMethod<
    [ballotId: BigNumberish],
    [
      [string, string, string[], bigint, bigint, boolean, string] & {
        title: string;
        description: string;
        options: string[];
        startTime: bigint;
        endTime: bigint;
        resultPublished: boolean;
        initiator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBallotCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBallotStatus"
  ): TypedContractMethod<[ballotId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEncryptedTally"
  ): TypedContractMethod<[ballotId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEncryptedVotes"
  ): TypedContractMethod<
    [ballotId: BigNumberish],
    [SecretBallotBox.EncryptedVoteStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTallyResult"
  ): TypedContractMethod<
    [ballotId: BigNumberish],
    [SecretBallotBox.TallyResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoteCount"
  ): TypedContractMethod<[ballotId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantTallyDecryption"
  ): TypedContractMethod<
    [ballotId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitTallyResult"
  ): TypedContractMethod<
    [
      ballotId: BigNumberish,
      resultPerOption: BigNumberish[],
      proofHash: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BallotCreated"
  ): TypedContractEvent<
    BallotCreatedEvent.InputTuple,
    BallotCreatedEvent.OutputTuple,
    BallotCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TallyPublished"
  ): TypedContractEvent<
    TallyPublishedEvent.InputTuple,
    TallyPublishedEvent.OutputTuple,
    TallyPublishedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "BallotCreated(uint256,address,string,uint64,uint64)": TypedContractEvent<
      BallotCreatedEvent.InputTuple,
      BallotCreatedEvent.OutputTuple,
      BallotCreatedEvent.OutputObject
    >;
    BallotCreated: TypedContractEvent<
      BallotCreatedEvent.InputTuple,
      BallotCreatedEvent.OutputTuple,
      BallotCreatedEvent.OutputObject
    >;

    "TallyPublished(uint256,uint32[],string)": TypedContractEvent<
      TallyPublishedEvent.InputTuple,
      TallyPublishedEvent.OutputTuple,
      TallyPublishedEvent.OutputObject
    >;
    TallyPublished: TypedContractEvent<
      TallyPublishedEvent.InputTuple,
      TallyPublishedEvent.OutputTuple,
      TallyPublishedEvent.OutputObject
    >;

    "VoteCast(uint256,address)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
